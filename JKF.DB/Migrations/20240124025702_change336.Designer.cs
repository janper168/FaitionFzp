// <auto-generated />
using System;
using JKF.DB.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JKF.DB.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20240124025702_change336")]
    partial class change336
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("JKF.DB.Models.Area", b =>
                {
                    b.Property<string>("AreaId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<int>("Layer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifyUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("QuickQuery")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SimpleSpelling")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("JKF.DB.Models.Authorize", b =>
                {
                    b.Property<string>("AuthorizeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.HasKey("AuthorizeId");

                    b.ToTable("Authorize");
                });

            modelBuilder.Entity("JKF.DB.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessScope")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CityId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FoundedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InnerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Manager")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OuterPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Postalcode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProvinceId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("JKF.DB.Models.ConditionRule", b =>
                {
                    b.Property<string>("ConditionRuleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RulesJson")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkFlowNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConditionRuleId");

                    b.HasIndex("WorkFlowNodeId");

                    b.ToTable("ConditionRule");
                });

            modelBuilder.Entity("JKF.DB.Models.CustomizedForm", b =>
                {
                    b.Property<string>("CustomizedFormId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FormCfg")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomizedFormId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("CustomizedForm");
                });

            modelBuilder.Entity("JKF.DB.Models.DataAuthorize", b =>
                {
                    b.Property<string>("DataAuthorizeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConditionsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InterfaceId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.HasKey("DataAuthorizeId");

                    b.HasIndex("InterfaceId");

                    b.ToTable("DataAuthorize");
                });

            modelBuilder.Entity("JKF.DB.Models.DataItem", b =>
                {
                    b.Property<string>("DataItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("DataItemId");

                    b.ToTable("DataItem");
                });

            modelBuilder.Entity("JKF.DB.Models.DataItemDetail", b =>
                {
                    b.Property<string>("DataItemDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataItemId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<int>("IsDefault")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.HasKey("DataItemDetailId");

                    b.HasIndex("DataItemId");

                    b.ToTable("DataItemDetail");
                });

            modelBuilder.Entity("JKF.DB.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InnerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Manager")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OurPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Account", b =>
                {
                    b.Property<string>("Erp_AccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Actived")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BalanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Holder")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("InitialBalanceAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Erp_AccountId");

                    b.ToTable("Erp_Account");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_AccountTransferRecord", b =>
                {
                    b.Property<string>("Erp_AccountTransferRecordId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ChargeAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ChargePayer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InAccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("OutAccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Erp_AccountTransferRecordId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("InAccountId");

                    b.HasIndex("OutAccountId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("Erp_AccountTransferRecord");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Batch", b =>
                {
                    b.Property<string>("Erp_BatchId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RemainQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfLifeDays")
                        .HasColumnType("int");

                    b.Property<int>("StockStatus")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("WraningDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Erp_BatchId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_Batch");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_BillNo", b =>
                {
                    b.Property<string>("Erp_BillNoId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BillType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DateString")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_BillNoId");

                    b.ToTable("Erp_BillNo");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_ChargeItem", b =>
                {
                    b.Property<string>("Erp_ChargeItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Erp_ChargeItemId");

                    b.ToTable("Erp_ChargeItem");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_CollectionAccount", b =>
                {
                    b.Property<string>("Erp_CollectionAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CollectionOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_CollectionAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CollectionOrderId");

                    b.ToTable("Erp_CollectionAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_CollectionOrder", b =>
                {
                    b.Property<string>("Erp_CollectionOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessorId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Erp_CollectionOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("Erp_CollectionOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Customer", b =>
                {
                    b.Property<string>("Erp_CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Actived")
                        .HasColumnType("int");

                    b.Property<decimal>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ArearsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("InitialArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Erp_CustomerId");

                    b.ToTable("Erp_Customer");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_FinanceFlow", b =>
                {
                    b.Property<string>("Erp_FinanceFlowId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountTransferRecordId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("AmountAfter")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("AmountBefore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("AmountChange")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CollectionOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidAccountTransferRecordId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidCollectionOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidPaymentOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidPurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidPurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidSalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidSalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_FinanceFlowId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountTransferRecordId");

                    b.HasIndex("CollectionOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("PaymentOrderId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseReturnOrderId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("SalesReturnOrderId");

                    b.HasIndex("VoidAccountTransferRecordId");

                    b.HasIndex("VoidCollectionOrderId");

                    b.HasIndex("VoidPaymentOrderId");

                    b.HasIndex("VoidPurchaseOrderId");

                    b.HasIndex("VoidPurchaseReturnOrderId");

                    b.HasIndex("VoidSalesOrderId");

                    b.HasIndex("VoidSalesReturnOrderId");

                    b.ToTable("Erp_FinanceFlow");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Goods", b =>
                {
                    b.Property<string>("Erp_GoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Actived")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EnableBatchControl")
                        .HasColumnType("int");

                    b.Property<int>("EnableInventoryWarning")
                        .HasColumnType("int");

                    b.Property<string>("GoodsCategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InventoryLower")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryUpper")
                        .HasColumnType("int");

                    b.Property<decimal>("LevelPrice1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("LevelPrice2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("LevelPrice3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ShelfLifeDays")
                        .HasColumnType("int");

                    b.Property<int>("ShelfLifeWarningDays")
                        .HasColumnType("int");

                    b.Property<string>("Spec")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_GoodsId");

                    b.HasIndex("GoodsCategoryId");

                    b.ToTable("Erp_Goods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_GoodsCategory", b =>
                {
                    b.Property<string>("Erp_GoodsCategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Erp_GoodsCategoryId");

                    b.ToTable("Erp_GoodsCategory");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_GoodsImage", b =>
                {
                    b.Property<string>("Erp_GoodsImageId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Erp_GoodsImageId");

                    b.HasIndex("GoodsId");

                    b.ToTable("Erp_GoodsImage");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Inventory", b =>
                {
                    b.Property<string>("Erp_InventoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockStatus")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_InventoryId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_Inventory");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_InventoryFlow", b =>
                {
                    b.Property<string>("Erp_InventoryFlowId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QuantityAfter")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBefore")
                        .HasColumnType("int");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("int");

                    b.Property<string>("SalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockCheckOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockInOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockOutOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockTransferOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidPurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidPurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidSalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidSalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidStockCheckOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidStockInOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidStockOutOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VoidStockTransferOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_InventoryFlowId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseReturnOrderId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("SalesReturnOrderId");

                    b.HasIndex("StockCheckOrderId");

                    b.HasIndex("StockInOrderId");

                    b.HasIndex("StockOutOrderId");

                    b.HasIndex("StockTransferOrderId");

                    b.HasIndex("VoidPurchaseOrderId");

                    b.HasIndex("VoidPurchaseReturnOrderId");

                    b.HasIndex("VoidSalesOrderId");

                    b.HasIndex("VoidSalesReturnOrderId");

                    b.HasIndex("VoidStockCheckOrderId");

                    b.HasIndex("VoidStockInOrderId");

                    b.HasIndex("VoidStockOutOrderId");

                    b.HasIndex("VoidStockTransferOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_InventoryFlow");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PaymentAccount", b =>
                {
                    b.Property<string>("Erp_PaymentAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_PaymentAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentOrderId");

                    b.ToTable("Erp_PaymentAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PaymentOrder", b =>
                {
                    b.Property<string>("Erp_PaymentOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessorId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("SuppilerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Erp_PaymentOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("SuppilerId");

                    b.ToTable("Erp_PaymentOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseAccount", b =>
                {
                    b.Property<string>("Erp_PurchaseAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_PurchaseAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("Erp_PurchaseAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseGoods", b =>
                {
                    b.Property<string>("Erp_PurchaseGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ReturnQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_PurchaseGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Erp_PurchaseGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseOrder", b =>
                {
                    b.Property<string>("Erp_PurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnableAutoStockIn")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("SuppilerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("otherAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_PurchaseOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("SuppilerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_PurchaseOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnAccount", b =>
                {
                    b.Property<string>("Erp_PurchaseReturnAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_PurchaseReturnAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Erp_PurchaseReturnAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnGoods", b =>
                {
                    b.Property<string>("Erp_PurchaseReturnGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ReturnPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ReturnQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_PurchaseReturnGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("PurchaseReturnOrderId");

                    b.ToTable("Erp_PurchaseReturnGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnOrder", b =>
                {
                    b.Property<string>("Erp_PurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CollectionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnableAutoStockOut")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnAccountErp_PurchaseReturnAccountId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("SuppilerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("otherAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_PurchaseReturnOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseReturnAccountErp_PurchaseReturnAccountId");

                    b.HasIndex("SuppilerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_PurchaseReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesAccount", b =>
                {
                    b.Property<string>("Erp_SalesAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SalesOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_SalesAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("SalesOrderId")
                        .IsUnique();

                    b.ToTable("Erp_SalesAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesGoods", b =>
                {
                    b.Property<string>("Erp_SalesGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ReturnQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SalesOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalesQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_SalesGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Erp_SalesGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesOrder", b =>
                {
                    b.Property<string>("Erp_SalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CollectionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("EnableAutoStockOut")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("otherAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_SalesOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_SalesOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnAccount", b =>
                {
                    b.Property<string>("Erp_SalesReturnAccountId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SalesReturnOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_SalesReturnAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("SalesReturnOrderId")
                        .IsUnique();

                    b.ToTable("Erp_SalesReturnAccount");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnGoods", b =>
                {
                    b.Property<string>("Erp_SalesReturnGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ReturnPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ReturnQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SalesReturnOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_SalesReturnGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("SalesReturnOrderId");

                    b.ToTable("Erp_SalesReturnGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnOrder", b =>
                {
                    b.Property<string>("Erp_SalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnableAutoStockIn")
                        .HasColumnType("int");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("SalesOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("otherAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Erp_SalesReturnOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_SalesReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckBatch", b =>
                {
                    b.Property<string>("Erp_StockCheckBatchId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StockCheckGoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockCheckOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SurplusQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockCheckBatchId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockCheckGoodsId");

                    b.HasIndex("StockCheckOrderId");

                    b.ToTable("Erp_StockCheckBatch");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckGoods", b =>
                {
                    b.Property<string>("Erp_StockCheckGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StockCheckOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("SurplusAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SurplusQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockCheckGoodsId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockCheckOrderId");

                    b.ToTable("Erp_StockCheckGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckOrder", b =>
                {
                    b.Property<string>("Erp_StockCheckOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalActualQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("TotalBookQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalSurplusAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("TotalSurplusQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockCheckOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_StockCheckOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInGoods", b =>
                {
                    b.Property<string>("Erp_StockInGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RemainQuantity")
                        .HasColumnType("int");

                    b.Property<string>("StockInOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockInQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockInGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockInOrderId");

                    b.ToTable("Erp_StockInGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInOrder", b =>
                {
                    b.Property<string>("Erp_StockInOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RemainQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SalesReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockTransferOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockInOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SalesReturnOrderId");

                    b.HasIndex("StockTransferOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_StockInOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInRecord", b =>
                {
                    b.Property<string>("Erp_StockInRecordId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessorId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("StockInOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockInRecordId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("StockInOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_StockInRecord");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInRecordGoods", b =>
                {
                    b.Property<string>("Erp_StockInRecordGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockInGoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockInQuantity")
                        .HasColumnType("int");

                    b.Property<string>("StockInRecordId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockInRecordGoodsId");

                    b.HasIndex("BatchId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockInGoodsId");

                    b.HasIndex("StockInRecordId");

                    b.ToTable("Erp_StockInRecordGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutGoods", b =>
                {
                    b.Property<string>("Erp_StockOutGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RemainQuantity")
                        .HasColumnType("int");

                    b.Property<string>("StockOutOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockOutQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockOutGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockOutOrderId");

                    b.ToTable("Erp_StockOutGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutOrder", b =>
                {
                    b.Property<string>("Erp_StockOutOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PurchaseReturnOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RemainQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SalesOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockTransferOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockOutOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("PurchaseReturnOrderId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("StockTransferOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_StockOutOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutRecord", b =>
                {
                    b.Property<string>("Erp_StockOutRecordId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessorId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("StockOutOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockOutRecordId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("StockOutOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Erp_StockOutRecord");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutRecordGoods", b =>
                {
                    b.Property<string>("Erp_StockOutRecordGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockOutGoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockOutQuantity")
                        .HasColumnType("int");

                    b.Property<string>("StockOutRecordId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Erp_StockOutRecordGoodsId");

                    b.HasIndex("BatchId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockOutGoodsId");

                    b.HasIndex("StockOutRecordId");

                    b.ToTable("Erp_StockOutRecordGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockTransferGoods", b =>
                {
                    b.Property<string>("Erp_StockTransferGoodsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GoodsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StockTransferOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockTransferQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockTransferGoodsId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StockTransferOrderId");

                    b.ToTable("Erp_StockTransferGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockTransferOrder", b =>
                {
                    b.Property<string>("Erp_StockTransferOrderId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnableAutoStockIn")
                        .HasColumnType("int");

                    b.Property<int>("EnableAutoStockOut")
                        .HasColumnType("int");

                    b.Property<string>("InWarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsVoid")
                        .HasColumnType("int");

                    b.Property<string>("OutWarehouseId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Erp_StockTransferOrderId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("InWarehouseId");

                    b.HasIndex("OutWarehouseId");

                    b.ToTable("Erp_StockTransferOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Suppiler", b =>
                {
                    b.Property<string>("Erp_SuppilerId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Actived")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("ArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ArearsStatus")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BankName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("InitialArearsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Erp_SuppilerId");

                    b.ToTable("Erp_Suppiler");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Warehouse", b =>
                {
                    b.Property<string>("Erp_WarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Actived")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Erp_WarehouseId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Erp_Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Interface", b =>
                {
                    b.Property<string>("InterfaceId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PropertiesJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReturnTypeName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("InterfaceId");

                    b.ToTable("Interface");
                });

            modelBuilder.Entity("JKF.DB.Models.Log", b =>
                {
                    b.Property<string>("LogId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Browser")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<int?>("ExecuteResult")
                        .HasColumnType("int");

                    b.Property<string>("ExecuteResultJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Host")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IPAddressName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OperateAccount")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("OperateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OperateTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OperateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SourceContentJson")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceObjectId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("JKF.DB.Models.Module", b =>
                {
                    b.Property<string>("ModuleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<string>("UrlAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("ModuleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleButton", b =>
                {
                    b.Property<string>("ModuleButtonId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModuleId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("ModuleButtonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleButton");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleColumn", b =>
                {
                    b.Property<string>("ModuleColumnId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("ModuleId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleColumnId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleColumn");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleExcelImportConfig", b =>
                {
                    b.Property<string>("ModuleExcelImportConfigId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AreaLayer")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsArea")
                        .HasColumnType("int");

                    b.Property<int>("IsDataItem")
                        .HasColumnType("int");

                    b.Property<int>("IsParentId")
                        .HasColumnType("int");

                    b.Property<int>("IsPhysics")
                        .HasColumnType("int");

                    b.Property<int>("IsRefer")
                        .HasColumnType("int");

                    b.Property<int>("IsValid")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModuleId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefEntityName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefEntityServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefPropertyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.HasKey("ModuleExcelImportConfigId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleExcelImportConfig");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleForm", b =>
                {
                    b.Property<string>("ModuleFormId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("ModuleId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleFormId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleForm");
                });

            modelBuilder.Entity("JKF.DB.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PostId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("JKF.DB.Models.PostUser", b =>
                {
                    b.Property<string>("PostId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("JKF.DB.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortCode")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("JKF.DB.Models.RoleUser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("JKF.DB.Models.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApplyerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FormContentJson")
                        .HasColumnType("longtext");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("WorkFlowDesignId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TaskId");

                    b.HasIndex("ApplyerId");

                    b.HasIndex("WorkFlowDesignId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNode", b =>
                {
                    b.Property<string>("TaskNodeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CerateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("NodeResult")
                        .HasColumnType("int");

                    b.Property<string>("ProcesserIds")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskNodeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("TaskNodeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNode");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNodeLog", b =>
                {
                    b.Property<string>("TaskNodeLogId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessComment")
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessResult")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaskNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskNodeName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TaskNodeProcesserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TaskNodeLogId");

                    b.HasIndex("TaskNodeId");

                    b.HasIndex("TaskNodeProcesserId");

                    b.ToTable("TaskNodeLog");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNodeProcesser", b =>
                {
                    b.Property<string>("TaskNodeProcesserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CerateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessComment")
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessResult")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcesserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskNodeName")
                        .HasColumnType("longtext");

                    b.HasKey("TaskNodeProcesserId");

                    b.HasIndex("ProcesserId");

                    b.HasIndex("TaskNodeId");

                    b.ToTable("TaskNodeProcesser");
                });

            modelBuilder.Entity("JKF.DB.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeleteMark")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EnabledMark")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HeadIcon")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MSN")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OICQ")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("QuickQuery")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SimpleSpelling")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WeChat")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowDesign", b =>
                {
                    b.Property<string>("WorkFlowDesignId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomizedFormId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("varchar(2500)");

                    b.Property<string>("FlowDesignJson")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WorkFlowDesignId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CustomizedFormId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("WorkFlowDesign");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowLine", b =>
                {
                    b.Property<string>("WorkFlowLineId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("LineType")
                        .HasColumnType("int");

                    b.Property<string>("WorkFlowDesignId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WorkFlowLineId");

                    b.HasIndex("WorkFlowDesignId");

                    b.ToTable("WorkFlowLine");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowNode", b =>
                {
                    b.Property<string>("WorkFlowNodeId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChildFlowDesignId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConditionRuleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IsAllPassThenPassRule")
                        .HasColumnType("int");

                    b.Property<int?>("IsProcessorTheSameToApplyerPassRule")
                        .HasColumnType("int");

                    b.Property<int?>("IsProcessorTheSameToLastProcessorRule")
                        .HasColumnType("int");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProcessorIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProcessorTypeRule")
                        .HasColumnType("int");

                    b.Property<string>("WorkFlowDesignId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WorkFlowNodeId");

                    b.HasIndex("WorkFlowDesignId");

                    b.ToTable("WorkFlowNode");
                });

            modelBuilder.Entity("JKF.DB.Models.ConditionRule", b =>
                {
                    b.HasOne("JKF.DB.Models.WorkFlowNode", "WorkFlowNode")
                        .WithMany()
                        .HasForeignKey("WorkFlowNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlowNode");
                });

            modelBuilder.Entity("JKF.DB.Models.CustomizedForm", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("JKF.DB.Models.DataAuthorize", b =>
                {
                    b.HasOne("JKF.DB.Models.Interface", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("JKF.DB.Models.DataItemDetail", b =>
                {
                    b.HasOne("JKF.DB.Models.DataItem", "DataItem")
                        .WithMany("DataItemDetailList")
                        .HasForeignKey("DataItemId");

                    b.Navigation("DataItem");
                });

            modelBuilder.Entity("JKF.DB.Models.Department", b =>
                {
                    b.HasOne("JKF.DB.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_AccountTransferRecord", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Account", "InAccount")
                        .WithMany()
                        .HasForeignKey("InAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Account", "OutAccount")
                        .WithMany()
                        .HasForeignKey("OutAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("InAccount");

                    b.Navigation("OutAccount");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Batch", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Inventory");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_CollectionAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_CollectionOrder", "CollectionOrder")
                        .WithMany()
                        .HasForeignKey("CollectionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CollectionOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_CollectionOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.Navigation("CreateUser");

                    b.Navigation("Customer");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_FinanceFlow", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_AccountTransferRecord", "AccountTransferRecord")
                        .WithMany()
                        .HasForeignKey("AccountTransferRecordId");

                    b.HasOne("JKF.DB.Models.Erp_CollectionOrder", "CollectionOrder")
                        .WithMany()
                        .HasForeignKey("CollectionOrderId");

                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PaymentOrder", "PaymentOrder")
                        .WithMany()
                        .HasForeignKey("PaymentOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "PurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "SalesReturnOrder")
                        .WithMany()
                        .HasForeignKey("SalesReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_AccountTransferRecord", "VoidAccountTransferRecord")
                        .WithMany()
                        .HasForeignKey("VoidAccountTransferRecordId");

                    b.HasOne("JKF.DB.Models.Erp_CollectionOrder", "VoidCollectionOrder")
                        .WithMany()
                        .HasForeignKey("VoidCollectionOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PaymentOrder", "VoidPaymentOrder")
                        .WithMany()
                        .HasForeignKey("VoidPaymentOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "VoidPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("VoidPurchaseOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "VoidPurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("VoidPurchaseReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "VoidSalesOrder")
                        .WithMany()
                        .HasForeignKey("VoidSalesOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "VoidSalesReturnOrder")
                        .WithMany()
                        .HasForeignKey("VoidSalesReturnOrderId");

                    b.Navigation("Account");

                    b.Navigation("AccountTransferRecord");

                    b.Navigation("CollectionOrder");

                    b.Navigation("CreateUser");

                    b.Navigation("PaymentOrder");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseReturnOrder");

                    b.Navigation("SalesOrder");

                    b.Navigation("SalesReturnOrder");

                    b.Navigation("VoidAccountTransferRecord");

                    b.Navigation("VoidCollectionOrder");

                    b.Navigation("VoidPaymentOrder");

                    b.Navigation("VoidPurchaseOrder");

                    b.Navigation("VoidPurchaseReturnOrder");

                    b.Navigation("VoidSalesOrder");

                    b.Navigation("VoidSalesReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Goods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_GoodsCategory", "GoodsCategory")
                        .WithMany()
                        .HasForeignKey("GoodsCategoryId");

                    b.Navigation("GoodsCategory");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_GoodsImage", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Inventory", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_InventoryFlow", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "PurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "SalesReturnOrder")
                        .WithMany()
                        .HasForeignKey("SalesReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockCheckOrder", "StockCheckOrder")
                        .WithMany()
                        .HasForeignKey("StockCheckOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockInOrder", "StockInOrder")
                        .WithMany()
                        .HasForeignKey("StockInOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockOutOrder", "StockOutOrder")
                        .WithMany()
                        .HasForeignKey("StockOutOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockTransferOrder", "StockTransferOrder")
                        .WithMany()
                        .HasForeignKey("StockTransferOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "VoidPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("VoidPurchaseOrderId");

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "VoidPurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("VoidPurchaseReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "VoidSalesOrder")
                        .WithMany()
                        .HasForeignKey("VoidSalesOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "VoidSalesReturnOrder")
                        .WithMany()
                        .HasForeignKey("VoidSalesReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockCheckOrder", "VoidStockCheckOrder")
                        .WithMany()
                        .HasForeignKey("VoidStockCheckOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockInOrder", "VoidStockInOrder")
                        .WithMany()
                        .HasForeignKey("VoidStockInOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockOutOrder", "VoidStockOutOrder")
                        .WithMany()
                        .HasForeignKey("VoidStockOutOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockTransferOrder", "VoidStockTransferOrder")
                        .WithMany()
                        .HasForeignKey("VoidStockTransferOrderId");

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Goods");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseReturnOrder");

                    b.Navigation("SalesOrder");

                    b.Navigation("SalesReturnOrder");

                    b.Navigation("StockCheckOrder");

                    b.Navigation("StockInOrder");

                    b.Navigation("StockOutOrder");

                    b.Navigation("StockTransferOrder");

                    b.Navigation("VoidPurchaseOrder");

                    b.Navigation("VoidPurchaseReturnOrder");

                    b.Navigation("VoidSalesOrder");

                    b.Navigation("VoidSalesReturnOrder");

                    b.Navigation("VoidStockCheckOrder");

                    b.Navigation("VoidStockInOrder");

                    b.Navigation("VoidStockOutOrder");

                    b.Navigation("VoidStockTransferOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PaymentAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PaymentOrder", "PaymentOrder")
                        .WithMany("PaymentAccountList")
                        .HasForeignKey("PaymentOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PaymentOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PaymentOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("JKF.DB.Models.Erp_Suppiler", "Suppiler")
                        .WithMany()
                        .HasForeignKey("SuppilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Processor");

                    b.Navigation("Suppiler");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithOne("PurchaseAccount")
                        .HasForeignKey("JKF.DB.Models.Erp_PurchaseAccount", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseGoodsList")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Suppiler", "Suppiler")
                        .WithMany()
                        .HasForeignKey("SuppilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Suppiler");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("Account");

                    b.Navigation("PurchaseReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "PurchaseReturnOrder")
                        .WithMany("PurchaseReturnGoodsList")
                        .HasForeignKey("PurchaseReturnOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("PurchaseReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnAccount", "PurchaseReturnAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseReturnAccountErp_PurchaseReturnAccountId");

                    b.HasOne("JKF.DB.Models.Erp_Suppiler", "Suppiler")
                        .WithMany()
                        .HasForeignKey("SuppilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseReturnAccount");

                    b.Navigation("Suppiler");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithOne("SalesAccount")
                        .HasForeignKey("JKF.DB.Models.Erp_SalesAccount", "SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithMany("SalesGoodsList")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnAccount", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "SalesReturnOrder")
                        .WithOne("SalesReturnAccount")
                        .HasForeignKey("JKF.DB.Models.Erp_SalesReturnAccount", "SalesReturnOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SalesReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "SalesReturnOrder")
                        .WithMany("SalesReturnGoodsList")
                        .HasForeignKey("SalesReturnOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("SalesReturnOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Customer");

                    b.Navigation("SalesOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckBatch", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockCheckGoods", "StockCheckGoods")
                        .WithMany()
                        .HasForeignKey("StockCheckGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockCheckOrder", "StockCheckOrder")
                        .WithMany()
                        .HasForeignKey("StockCheckOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("StockCheckGoods");

                    b.Navigation("StockCheckOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockCheckOrder", "StockCheckOrder")
                        .WithMany("StockCheckGoodsList")
                        .HasForeignKey("StockCheckOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Goods");

                    b.Navigation("StockCheckOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Processor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockInOrder", "StockInOrder")
                        .WithMany()
                        .HasForeignKey("StockInOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("StockInOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesReturnOrder", "SalesReturnOrder")
                        .WithMany()
                        .HasForeignKey("SalesReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockTransferOrder", "StockTransferOrder")
                        .WithMany()
                        .HasForeignKey("StockTransferOrderId");

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SalesReturnOrder");

                    b.Navigation("StockTransferOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInRecord", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("JKF.DB.Models.Erp_StockInOrder", "StockInOrder")
                        .WithMany()
                        .HasForeignKey("StockInOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Processor");

                    b.Navigation("StockInOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockInRecordGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockInGoods", "StockInGoods")
                        .WithMany()
                        .HasForeignKey("StockInGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockInRecord", "StockInRecord")
                        .WithMany()
                        .HasForeignKey("StockInRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Goods");

                    b.Navigation("StockInGoods");

                    b.Navigation("StockInRecord");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockOutOrder", "StockOutOrder")
                        .WithMany()
                        .HasForeignKey("StockOutOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("StockOutOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_PurchaseReturnOrder", "PurchaseReturnOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseReturnOrderId");

                    b.HasOne("JKF.DB.Models.Erp_SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("JKF.DB.Models.Erp_StockTransferOrder", "StockTransferOrder")
                        .WithMany()
                        .HasForeignKey("StockTransferOrderId");

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("PurchaseReturnOrder");

                    b.Navigation("SalesOrder");

                    b.Navigation("StockTransferOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutRecord", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.HasOne("JKF.DB.Models.Erp_StockOutOrder", "StockOutOrder")
                        .WithMany()
                        .HasForeignKey("StockOutOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Processor");

                    b.Navigation("StockOutOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockOutRecordGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockOutGoods", "StockOutGoods")
                        .WithMany()
                        .HasForeignKey("StockOutGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockOutRecord", "StockOutecord")
                        .WithMany()
                        .HasForeignKey("StockOutRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Goods");

                    b.Navigation("StockOutecord");

                    b.Navigation("StockOutGoods");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockTransferGoods", b =>
                {
                    b.HasOne("JKF.DB.Models.Erp_Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_StockTransferOrder", "StockTransferOrder")
                        .WithMany()
                        .HasForeignKey("StockTransferOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("StockTransferOrder");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockTransferOrder", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "InWarehouse")
                        .WithMany()
                        .HasForeignKey("InWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.Erp_Warehouse", "OutWarehouse")
                        .WithMany()
                        .HasForeignKey("OutWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("InWarehouse");

                    b.Navigation("OutWarehouse");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_Warehouse", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleButton", b =>
                {
                    b.HasOne("JKF.DB.Models.Module", "Module")
                        .WithMany("ModuleButtonList")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleColumn", b =>
                {
                    b.HasOne("JKF.DB.Models.Module", "Module")
                        .WithMany("ModuleColumnList")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleExcelImportConfig", b =>
                {
                    b.HasOne("JKF.DB.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("JKF.DB.Models.ModuleForm", b =>
                {
                    b.HasOne("JKF.DB.Models.Module", "Module")
                        .WithMany("ModuleFormList")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("JKF.DB.Models.Post", b =>
                {
                    b.HasOne("JKF.DB.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("JKF.DB.Models.PostUser", b =>
                {
                    b.HasOne("JKF.DB.Models.Post", "Post")
                        .WithMany("PostUserList")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "User")
                        .WithMany("PostUserList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JKF.DB.Models.RoleUser", b =>
                {
                    b.HasOne("JKF.DB.Models.Role", "Role")
                        .WithMany("RoleUserList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "User")
                        .WithMany("RoleUserList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JKF.DB.Models.Task", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "Applyer")
                        .WithMany()
                        .HasForeignKey("ApplyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.WorkFlowDesign", "WorkFlowDesign")
                        .WithMany()
                        .HasForeignKey("WorkFlowDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applyer");

                    b.Navigation("WorkFlowDesign");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNode", b =>
                {
                    b.HasOne("JKF.DB.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNodeLog", b =>
                {
                    b.HasOne("JKF.DB.Models.TaskNode", "TaskNode")
                        .WithMany()
                        .HasForeignKey("TaskNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.TaskNodeProcesser", "TaskNodeProcesser")
                        .WithMany()
                        .HasForeignKey("TaskNodeProcesserId");

                    b.Navigation("TaskNode");

                    b.Navigation("TaskNodeProcesser");
                });

            modelBuilder.Entity("JKF.DB.Models.TaskNodeProcesser", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "Processer")
                        .WithMany()
                        .HasForeignKey("ProcesserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.TaskNode", "TaskNode")
                        .WithMany()
                        .HasForeignKey("TaskNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Processer");

                    b.Navigation("TaskNode");
                });

            modelBuilder.Entity("JKF.DB.Models.User", b =>
                {
                    b.HasOne("JKF.DB.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowDesign", b =>
                {
                    b.HasOne("JKF.DB.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.CustomizedForm", "CustomizedForm")
                        .WithMany()
                        .HasForeignKey("CustomizedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JKF.DB.Models.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("CustomizedForm");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowLine", b =>
                {
                    b.HasOne("JKF.DB.Models.WorkFlowDesign", "WorkFlowDesign")
                        .WithMany()
                        .HasForeignKey("WorkFlowDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlowDesign");
                });

            modelBuilder.Entity("JKF.DB.Models.WorkFlowNode", b =>
                {
                    b.HasOne("JKF.DB.Models.WorkFlowDesign", "WorkFlowDesign")
                        .WithMany()
                        .HasForeignKey("WorkFlowDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlowDesign");
                });

            modelBuilder.Entity("JKF.DB.Models.DataItem", b =>
                {
                    b.Navigation("DataItemDetailList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PaymentOrder", b =>
                {
                    b.Navigation("PaymentAccountList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseAccount");

                    b.Navigation("PurchaseGoodsList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_PurchaseReturnOrder", b =>
                {
                    b.Navigation("PurchaseReturnGoodsList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesOrder", b =>
                {
                    b.Navigation("SalesAccount");

                    b.Navigation("SalesGoodsList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_SalesReturnOrder", b =>
                {
                    b.Navigation("SalesReturnAccount");

                    b.Navigation("SalesReturnGoodsList");
                });

            modelBuilder.Entity("JKF.DB.Models.Erp_StockCheckOrder", b =>
                {
                    b.Navigation("StockCheckGoodsList");
                });

            modelBuilder.Entity("JKF.DB.Models.Module", b =>
                {
                    b.Navigation("ModuleButtonList");

                    b.Navigation("ModuleColumnList");

                    b.Navigation("ModuleFormList");
                });

            modelBuilder.Entity("JKF.DB.Models.Post", b =>
                {
                    b.Navigation("PostUserList");
                });

            modelBuilder.Entity("JKF.DB.Models.Role", b =>
                {
                    b.Navigation("RoleUserList");
                });

            modelBuilder.Entity("JKF.DB.Models.User", b =>
                {
                    b.Navigation("PostUserList");

                    b.Navigation("RoleUserList");
                });
#pragma warning restore 612, 618
        }
    }
}
